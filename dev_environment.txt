2.1.1两台NGINX服务器安装（10.*.*.1，10.*.*.2）
1.	装NGINX，keepalived软件
    测试NGINX是否安装成功
    nginx+keepalived安装与配置
结构如下
    nginx master 10.*.*.1
    nginx backup 10.*.*.2
    vip 10.*.*.199
安装配置
  a)Nginx安装详见 2.1.2 发布服务器安装中的nginx安装
    只是安装路径用默认，即：./configure --with-openssl=/usr/include/openssl/
  b)keepalived安装
    1、tar xvzf keepalived-1.1.20.tar.gz
    2、cd keepalived-1.1.2
    3、./configure --prefix=/usr/local/keepalived
    configure时若出现异常 直接执行：
    ./configure
    4、make && make install
    5、拷贝文件到相应目录
        cp /usr/local/etc/rc.d/init.d/keepalived /etc/init.d/
        cp /usr/local/etc/sysconfig/keepalived /etc/sysconfig/
        chmod +x /etc/init.d/keepalived
        chkconfig --add keepalived
        chkconfig keepalived on
        mkdir /etc/keepalived
        cp keepalived/etc/keepalived/keepalived.conf /etc/keepalived/
    ln -s /usr/local/sbin/keepalived /usr/sbin/
    6、创建nginx脚本
      vi /etc/keepalived/nginx_pid.sh     （10.*.*.1，10.*.*.2）
        #!/bin/bash
            A=`ps -C nginx --no-header |wc -l`
            if [ $A -eq 0 ];then
                            /usr/local/nginx/sbin/nginx
                            sleep 3
                            if [ `ps -C nginx --no-header |wc -l` -eq 0 ];then
                                   killall keepalived
                            fi
        fi
    7、创建配置文件
      配置nginx master的keepalived配置文件（10.*.*.1）
    [root@zhang1 keepalived]# vi /etc/keepalived/keepalived.conf
    global_defs {
       router_id LVS_DEVEL
    }
    vrrp_script chk_nginx {
            script "/etc/keepalived/nginx_pid.sh"
            interval 2
            weight 2
    }
    vrrp_instance VI_1 {
        state MASTER
        interface eth0
        virtual_router_id 51
        priority 100
        advert_int 1
        authentication {
            auth_type PASS
            auth_pass 1111
        }
        virtual_ipaddress {
            10.*.*.199
        }

        track_script {
            chk_nginx
        }
    }
    配置nginx backup的keepalived配置文件（10.*.*.2）
    [root@zhang1 keepalived]# vi /etc/keepalived/keepalived.conf
    global_defs {
       router_id LVS_DEVEL
    }
    vrrp_script chk_nginx {
            script "/etc/keepalived/nginx_pid.sh"
            interval 2
            weight 2
    }
    vrrp_instance VI_1 {
        state BACKUP
        interface eth0
        virtual_router_id 51
        priority 80
        advert_int 1
        authentication {
            auth_type PASS
            auth_pass 1111
        }
        virtual_ipaddress {
       10.*.*.199
        }

        track_script {
            chk_nginx
        }
    }

2.	复制nginx配置文件到nginx安装目录
  Nginx默认安装在/usr/local下，把我们系统安装包中trunk\untis\adms\nginx_conf下的文件复制到nginx默认的安装路径/usr/local/nginx/conf/目录下覆盖已经有的文件
3.	重启NGINX
4.	NGINX文件解释与修改
Nginx相关配置文件将会有两份，一份是针对均衡服务器的，一份是正对标准的
只要将对应的文件复制到nginx/conf目录即可
用vi打开安装目录/usr/local/nginx/conf/load_balance.conf文件
内容如下：
对应设备IP地址端口

upstream adms_device {
     server 10.*.*.3:8888 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8888 max_fails=2 fail_timeout=30s;
}
upstream adms_mng {
     server 10.*.*.3:8888 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8888 max_fails=2 fail_timeout=30s;
}
upstream adms_svr_control {
     server 10.*.*.3:8888 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8888 max_fails=2 fail_timeout=30s;
}
upstream adms_cas{
     server 10.*.*.3:8033 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8033 max_fails=2 fail_timeout=30s backup;
}
upstream adms_cas_bk{
     server 10.*.*.3:8033 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8033 max_fails=2 fail_timeout=30s backup;
}
upstream data_import{
     server 10.*.*.3:8888 max_fails=2 fail_timeout=30s;
     server 10.*.*.4:8888 max_fails=2 fail_timeout=30s;
}
根据实际情况修改该文件中的IP地址与端口，除了8033端口不需要更改。(注意：生产环境以及UAT都发现80端口有问题，建议管理员服务器，设备服务器安装时不采用80端口，选择其它端口即可，如8888端口)




2.1.2发布服务器安装（10.*.*.3）
2.1.2.1 考勤软件安装
		所有安装都是通过root用户
	Python26安装
tar xvzf Python-2.6.5.tgz
cd Python-2.6.5

vi Modules/Setup.dist 修改
206 # CSV file helper
207 #_csv _csv.c
208
209 # Socket module helper for socket(2)
210 _socket socketmodule.c
211
212 # Socket module helper for SSL support; you must comment out the other
213 # socket line above, and possibly edit the SSL variable:
214 SSL=/usr/local/ssl
215 _ssl _ssl.c \
216     -DUSE_SSL -I$(SSL)/include -I$(SSL)/include/openssl \
217     -L$(SSL)/lib -lssl -lcrypto
218
219 # The crypt module is now disabled by default because it breaks builds
220 # on many systems (where -lcrypt is needed), e.g. Linux (I believe).
221 #
222 # First, look at Setup.config; configure may have set this for you.
223
224 #crypt cryptmodule.c # -lcrypt  # crypt(3); needs -lcrypt on some systems

./configure prefix=/opt/python26
make && make install
安装后的配置:
编辑/etc/profile 
/etc/rc.d/init.d/nfs start
memcached -d -m 2048 -u root -p 11211 -P /tmp/memcached.pid
export PATH=/opt/python26/bin:/opt/PostgreSQL/9.1/bin/:$ORACLE_HOME/bin:$PATH
export LD_LIBRARY_PATH=/opt/python26/lib:$ORACLE_HOME/lib:$LD_LIBRARY_PATH
export PYTHONPATH=/opt/system_dir/python-support:/opt/python26/lib/python2.6/site-packages:$PYTHONPATH
alias python='/opt/python26/bin/python'
alias python24='/usr/bin/python'
然后重启下系统 reboot
	lxml安装
a) tar xvzf libxml2-2.7.8.tar.gz
b) tar xvzf libxslt-1.1.26.tar.gz
c)cd 到 libxml2-2.7.8 目录
   ./configure
   make
   sudo make install
d)cd 到libxslt-1.1.26 目录
   ./configure
   make &&  make install
e) tar xvzf lxml-2.3.tgz
f)cd lxml-2.3
  执行python setup.py install
g)验证
 命令行键入python
import xml
	装fpconst-0.72
tar xvzf fpconst-0.7.2.tar.gz
cd fpconst
执行Python setup.py install
	装SOAPpy
unzip SOAPpy-0.12.0.zip
cd SOAPpy-0.12.0
修改Soappy下
在安装其以上版本时发现SyntaxError: from __future__ imports must occur at the beginning of the file这样一个错误
在其安装包中打开SOAPpy文件夹下找到如下三个文件：
Client.py
Types.py
Server.py
然后分别把它们当中的这行语句：from __future__ import nested_scopes
移到文件开始第一行的位置即可安装成功。
执行Python setup.py install 安装
	Prl安装
1.安装PIL
第一步：安装png （libpng-1.5.6.tar.gz）
$ tar -xvzf libpng-1.5.6.tar.gz 
$ cd libpng-1.5.6
$ ./configure --prefix=/usr/local
$ make && make install
第二步：安装freetype（freetype-2.4.7.tar.gz）
$ tar xvzf freetype-2.4.7.tar.gz 
$ cd freetype-2.4.7/
$ ./configure --prefix=/usr/local
$ make 
$ make install
第三步：安装jpeg（jpegsrc.v8c.tar.gz）
$ tar -xvzf jpegsrc.v8c.tar.gz
$ cd jpeg-8c/
$ ./configure --prefix=/usr/local
$ make 
$ sudo make install
第四步：安装PIL（Imaging-1.1.7.tar.gz）
1、$ tar -xvzf Imaging-1.1.7.tar.gz
$ cd Imaging-1.1.7/
2、修改setup.py：
JPEG_ROOT = "/usr/local/lib"
ZLIB_ROOT = "/usr/local/lib"
FREETYPE_ROOT = "/usr/local/lib"
3、检查是否支持：
输入$ python setup.py build_ext –i
若出现：
running build_ext
--------------------------------------------------------------------
PIL 1.1.7 SETUP SUMMARY
--------------------------------------------------------------------
version 1.1.7
platform linux2 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53)
[GCC 4.5.2]
--------------------------------------------------------------------
*** TKINTER support not available
--- JPEG support available -----------------------> OK！
--- ZLIB (PNG/ZIP) support available -----------------------> OK！
--- FREETYPE2 support available -----------------------> OK！
*** LITTLECMS support not available
--------------------------------------------------------------------
则可以正式安装：
拷贝
/usr/lib/
/usr/local/lib/
/opt/PostgreSQL/9.1/lib/
到 /etc/ld.so.config
ldconfig
$ sudo python setup.py install
>>> import _imaging 测试
否则，需要以ldconfig
第五步：
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ImportError: libjpeg.so.8: cannot open shared object file: No such file or directory

解决办法
查找 whereis libjpeg.so.8
[root@localhost lib]# ls  libjpeg.so.8 -l
lrwxrwxrwx 1 root root 16 Mar  1 20:19 libjpeg.so.8 -> libjpeg.so.8.3.0
libjpeg.so.8是个链接需要找原始文件libjpeg.so.8.3.0 
whereis libjpeg.so.8.3.0
/usr/local/lib/libjpeg.so.8.3.0
（A quick fix is to add the directory that contains libjpeg.so.8 to your /etc/ld.so.conf file, and then run ldconfig
vi /etc/ld.so.conf
把查找到的文件路径/usr/local/lib/libjpeg.so.8所对应的文件夹路径/usr/local/lib/加入到d.so.conf中
然后ldconfig
）
	Memcache安装
a)	先安装libevent。
cd libevent-2.0.16-stable
./configure --prefix=/usr
make
make install；
b)再安装memcached，只是需要在配置时需要指定libevent的安装路径即./configure --with-libevent=/usr
make && make install
	考勤代码
a)在/opt/目录下建一个目录mkdir system_dir
b)解压考勤代码安装包unzip mysite.zip 把解压的文件夹trunk/下的所有文件复制到
/opt/system_dir文件夹下面
c)修改attsit.ini
vi /opt/system_dir/units/adms
	postgresql 安装(主要是需要其连接驱动，安装完后把其自动启动的服务删除掉)
unzip postgresql-9.1.1-1-linux-x64.zip
chmod 777 postgresql-9.1.1-1-linux-x64.bin
./ postgresql-9.1.1-1-linux-x64.bin
输入用户名和密码 root，root
装到/opt/下
设置编码格式 zh-cn utf-8    (624)
	psycopg2-2.4.2安装
a)tar xvzf psycopg2-2.4.2.tar.gz
b)cd psycopg2-2.4.2
c)vi setup.cfg
d)pg_config=/opt/PostgreSQL /9.1/bin/pg_config
e)vi /etc/ld.so.conf
f)把/ opt/PostgreSQL/9.1/lib/环境路径加入这个文件中
g)ldconfig
h)python setup.py install
i) /etc/rc.d/init.d/postgresql-9.1 stop 停止启动脚本
j) rm /etc/rc.d/init.d/postgresql-9.1 –f删除启动脚本
	nginx安装
a) 安装pcre-8.30
rpm -ivh pcre-6.6-2.el5_1.7.x86_64.rpm
rpm -ivh pcre-devel-6.6-2.el5_1.7.x86_64.rpm 
(最新下载地址   ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/放到
tar xvzf  pcre-8.30.tar.gz)
b) tar xvzf  nginx-1.0.11.tar.gz
查找openssl是否安装的路径
whereis openssl
openssl: /usr/bin/openssl /usr/lib/openssl /usr/include/openssl /usr/share/man/man1/openssl.1ssl.gz

cd nginx-1.0.11
./configure --prefix=/opt/system_dir/python-support/nginx --with-openssl=/usr/include/openssl/ --sbin-path=/opt/system_dir/python-support/nginx/nginx
报如下错误：
./configure: error: the HTTP rewrite module requires the PCRE library.
You can either disable the module by using --without-http_rewrite_module
option, or install the PCRE library into the system, or build the PCRE library
statically from the source with nginx by using --with-pcre=<path> option.
c)make
d)make install
f)验证是否安装成功
cd /opt/system_dir/python-support/nginx/
./nginx
Wget http://127.0.0.1
  如果返回welcome nginx 则说明安装成功
 g)拷贝安装包目录trunk/units/adms/normal_conf/下所有的文件到nginx配置目录(/opt/system_dir/python-support/nginx/conf/)


2.1.2.2共享目录
	a)mkdir /opt/device_190
	b) vi /etc/exports
	  加入如下共享，根据情况自己设置权限规则，共享考勤代码目录和设备上传数据的目录
/opt/system_dir 10.*.*.1(rw,sync,no_root_squash)
/opt/system_dir 10.*.*.2(rw,sync,no_root_squash)
/opt/system_dir 10.*.*.3(rw,sync,no_root_squash)
/opt/system_dir 10.*.*.4(rw,sync,no_root_squash)
/opt/device_190 10.*.*.4(rw,sync,no_root_squash)
/opt/release_system_dir/upsystem_dir 10.*.*.4(rw,sync,no_root_squash)
2.1.2.3 发布配置
	该步骤需要等所有服务器都装完后执行。
	a)mkdir /opt/release_system_dir
	根据服务器情况建立几个要挂接的目录
mkdir /opt/release_system_dir/upsystem_dir 发布的文件拷贝到这个目录下
mkdir /opt/device_bak190 备份目录，用来挂接
mkdir /opt/release_system_dir/system_dir_nginx_1
mkdir /opt/release_system_dir/system_dir_nginx_2
mkdir /opt/release_system_dir/system_dir_3
mkdir /opt/release_system_dir/system_dir_4
b)挂接发布目录与设备上传文件备份目录
mount -t nfs 10.*.*.1:/opt/system_dir /opt/release_system_dir/system_dir_nginx_1
mount -t nfs 10.*.*.2:/opt/system_dir /opt/release_system_dir/system_dir_nginx_2
mount -t nfs 10.*.*.3:/opt/system_dir /opt/release_system_dir/system_dir_3
mount -t nfs 10.*.*.4:/opt/system_dir /opt/release_system_dir/system_dir_4

mount -t nfs 10.*.*.4:/opt/device_bak190 /opt/device_bak190  挂接上传文件备份目录
mount -t nfs 10.*.*.3:/opt/device_190 /opt/device_190  





======================linux 服务器之间文件传输：-------------
接收服务器: -------------10.*.*.2

nc -l 6677 |tar -C /opt -zxf - 

推送服务器  -------------10.*.*.1 推送 至10.*.*.2
tar -zcvf  - system_dir |nc 10.*.*.2 6677 

=======================设置环境变量(pythonpath等),系统注销后生效-------在文件添加 vi /etc/profile ----
/etc/rc.d/init.d/nfs start
memcached -d -m 2048 -u root -p 11211 -P /tmp/memcached.pid
export PATH=/opt/python26/bin:/opt/PostgreSQL/9.1/bin/:$ORACLE_HOME/bin:$PATH
export LD_LIBRARY_PATH=/opt/python26/lib:/opt/PostgreSQL/9.1/lib/:$ORACLE_HOME/lib:$LD_LIBRARY_PATH
export PYTHONPATH=/opt/system_dir/python-support:/opt/python26/lib/python2.6/site-packages:$PYTHONPATH
alias python='/opt/python26/bin/python'
alias python24='/usr/bin/python'

==========
-------  /etc/profile，/etc/bashrc 是系统全局环境变量设定  
-------  ~/.profile，~/.bashrc用户家目录下的私有环境变量设定


================== 设置 LD_LIBRARY_PATH 动态库 ------系统重启后消失
echo $LD_LIBRARY_PATH
LD_LIBRARY_PATH=/opt/PostgreSQL/9.1/lib/
export LD_LIBRARY_PATH
echo $LD_LIBRARY_PATH

--------- 刷新动态库配置  ldconfig